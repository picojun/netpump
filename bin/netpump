#!/usr/bin/env -S ruby

Process.setproctitle "netpump"
$stdin.close
if $PROGRAM_NAME.include?("/")
  $VERBOSE = true
  $LOAD_PATH.unshift File.expand_path("../lib", __dir__)
else
  $VERBOSE = nil
end

require "optparse"
require "uri"
require "netpump"

copts = {}
sopts = {}

op = OptionParser.new do |op|
  op.summary_width = 24

  op.banner = "Usage: netpump [options]"
  op.separator ""
  op.separator "Options:"

  Port = %r{\A[1-9][0-9]*\z} # Port zero is not supported.
  op.accept(Port, nil) do |val|
    port = Integer(val)
    raise ArgumentError if port > 65_535
    port
  rescue ArgumentError
    raise OptionParser::InvalidArgument, val
  end

  WSS = %r{\Awss?://.*\z}i
  op.accept(WSS, nil) do |val|
    URI(val)
  rescue URI::InvalidURIError
    raise OptionParser::InvalidArgument, val
  end

  op.on("-c", "--client MODE", ["direct", "browser"], "start netpump client (mode: direct, browser)") do |mode|
    copts[:mode] = mode
  end

  op.on("--client-host HOST", String, "client host (default: 0.0.0.0)") do |host|
    copts[:host] = host
  end

  op.on("--client-port PORT", Port, "client port (default: 8080)") do |port|
    copts[:port] = port
  end

  op.on("--proxy-host HOST", String, "local proxy server host (default: 127.0.0.1)") do |host|
    copts[:proxy_host] = host
  end

  op.on("--proxy-port PORT", Port, "local proxy server port (default: 3128)") do |port|
    copts[:proxy_port] = port
  end

  op.on("--server-url URL", WSS, "netpump server url (example: wss://netpump.org)") do |url|
    copts[:server_url] = url
  end

  op.on("-s", "--server", "start netpump server") do
    sopts[:server] = true
  end

  op.on("--server-host HOST", String, "server host (default: 0.0.0.0)") do |host|
    sopts[:host] = host
  end

  op.on("--server-port PORT", Port, "server port (default: 10000)") do |port|
    sopts[:port] = port
  end

  op.on_tail("--version", "print version") do
    version = File.expand_path("../VERSION", __dir__)
    puts(File.read(version))
    exit
  end

  op.on_tail("--help", "print this help") do
    puts(op)
    exit
  end
end

begin
  op.parse!
rescue OptionParser::ParseError => e
  op.abort(e)
else
  unless copts.key?(:mode) || sopts.key?(:server)
    copts[:mode] = "direct"
  end
end

EventMachine.error_handler { |e| log "[!] unexpected errback.", error: e }
EventMachine.run do
  trap(:INT) { puts; EventMachine.stop }
  if sopts.delete(:server)
    server = Netpump::Server.new(**sopts)
    server.start
  end
  if copts[:mode]
    client = Netpump::Client.new(**copts)
    client.start
  end
rescue => e
  log "[!] #{e.message}."
  EventMachine.stop
end
